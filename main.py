# ==============================================================================
# main.py: FastAPI RAG Query Agent with Google Generative AI
#
# Description:
# This script provides a FastAPI endpoint that loads a pre-built ChromaDB
# knowledge base, determines a farmer's state from coordinates, performs a
# RAG query, and uses Google's Gemini model to generate a financial proposal.
#
# How to Run:
# 1. Ensure 'build_knowledge_base.py' has been run and a 'chroma_db'
#    directory exists.
# 2. Set your GOOGLE_API_KEY as an environment variable.
# 3. Run the server from your terminal:
#    uvicorn main:app --reload
# 4. Access the interactive API docs at http://127.0.0.1:8000/docs
# ==============================================================================

import os
from typing import Optional

# FastAPI and Pydantic
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
import uvicorn

# Google Generative AI
import google.generativeai as genai

# LangChain and Vector Database
# LangChain and Vector Database
from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import SentenceTransformerEmbeddings

# Geolocation
from geopy.geocoders import Nominatim

# --- CONFIGURE FASTAPI APP ---
app = FastAPI(
    title="Krishi Financial Advisor API",
    description="A RAG-based agent to provide financial advice to farmers using Google's Gemini model.",
    version="1.0.0",
)

# --- CONFIGURE GOOGLE GENERATIVE AI ---
try:
    GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
    if not GOOGLE_API_KEY:
        raise ValueError("GOOGLE_API_KEY environment variable not set.")
    genai.configure(api_key=GOOGLE_API_KEY)
except ValueError as e:
    print(f"Error: {e}. Please set your GOOGLE_API_KEY environment variable.")
    # In a real app, you might want more robust handling than exiting.
    exit()

# --- PYDANTIC INPUT MODEL ---
class FinancialQueryInput(BaseModel):
    """Input model for the financial advisory endpoint."""
    goal: str = Field(
        ...,
        examples=["I need a loan of around 5 lakhs to buy a new tractor."],
        description="The farmer's financial goal or question."
    )
    latitude: float = Field(
        ...,
        examples=[30.9010],
        description="Latitude of the farmer's location."
    )
    longitude: float = Field(
        ...,
        examples=[75.8573],
        description="Longitude of the farmer's location."
    )

# --- HELPER TOOL ---
def get_state_from_coords(lat: float, lon: float) -> Optional[str]:
    """Performs reverse geocoding to find the state from coordinates."""
    try:
        geolocator = Nominatim(user_agent="agri_loan_fastapi_agent")
        location = geolocator.reverse((lat, lon), exactly_one=True, timeout=10)
        if location and 'address' in location.raw and 'state' in location.raw['address']:
            return location.raw['address']['state']
        return None
    except Exception as e:
        print(f"TOOL_ERROR: Could not perform reverse geocoding. Reason: {e}")
        return None

# --- API ENDPOINTS ---
@app.get("/", summary="Root endpoint to check server status")
def read_root():
    """A simple endpoint to confirm that the API server is running."""
    return {"status": "ok", "message": "Welcome to the Financial Advisor API!"}


@app.post("/financial_advisory", summary="Get a financial advisory for a farmer")
async def get_financial_advisory(query_input: FinancialQueryInput):
    """
    Accepts a farmer's goal and location, then returns a detailed financial
    proposal generated by a RAG pipeline with Google's Gemini model.
    """
    # 1. Load the knowledge base
    persist_directory = 'chroma_db'
    embedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")
    try:
        vectorstore = Chroma(
            persist_directory=persist_directory,
            embedding_function=embedding_function
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Could not load the knowledge base. Ensure 'build_knowledge_base.py' has been run. Error: {e}"
        )

    # 2. Determine state from coordinates
    state = get_state_from_coords(query_input.latitude, query_input.longitude)

    # 3. Formulate query and retrieve documents
    query = f"Based on the provided context, find and summarize the best subsidized agricultural loans for a farmer in {state or 'India'} whose goal is: '{query_input.goal}'. Focus on national schemes like the Kisan Credit Card (KCC) as well as any state-specific schemes. Prioritize loans with low interest rates, government subsidies, or interest subvention."
    retriever = vectorstore.as_retriever(search_kwargs={"k": 5})
    relevant_docs = retriever.get_relevant_documents(query)

    if not relevant_docs:
        raise HTTPException(
            status_code=404,
            detail="Could not find any relevant information in the knowledge base for your query."
        )

    context_for_llm = "\n\n---\n\n".join([f"Source: {doc.metadata['source']}\nContent: {doc.page_content}" for doc in relevant_docs])

    # 4. Generate the final prompt for the Gemini model
    final_prompt = f"""
    You are an expert financial advisor for farmers in India.
    Your task is to provide a clear, concise, and helpful summary of the best loan options based *only* on the context provided below.
    Do not make up information. If the context doesn't provide a specific number (like an interest rate), state that it was "not specified in the provided text".
    Structure your answer clearly. Start with the best national option, then mention any relevant state-specific information if found.

    CONTEXT:
    {context_for_llm}

    QUESTION:
    {query}

    ANSWER:
    """

    # 5. Call the Google Generative AI API
    try:
        # Note: Corrected model name from 'gemini-2.5-flash' to 'gemini-1.5-flash' as it's a valid and common model.
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(final_prompt)
        return {"advisory": response.text}
    except Exception as e:
        raise HTTPException(
            status_code=503,
            detail=f"Failed to generate response from Google AI. Reason: {e}"
        )

# --- RUNNER ---
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)